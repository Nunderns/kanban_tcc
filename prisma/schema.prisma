// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  googleId         String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tasks            Task[]
  projects         Project[]
  notifications    Notification[]
  settings         Settings?
  sessions         Session[]
  workspaces       Workspace[]
  workspaceMembers WorkspaceMember[]
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id])
  tasks       Task[]
}

model Task {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  status      Status         @default(BACKLOG)
  priority    Priority       @default(NONE)
  startDate   DateTime?
  dueDate     DateTime?
  module      String?
  cycle       String?
  assignees String[] @default([])
  labels    String[] @default([])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  projectId   Int?
  project     Project?       @relation(fields: [projectId], references: [id])
  activities  TaskActivity[]
  
  @@index([userId])
  @@index([projectId])
}

enum Status {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Settings {
  id                   Int      @id @default(autoincrement())
  userId               Int      @unique
  user                 User     @relation(fields: [userId], references: [id])
  darkMode             Boolean  @default(false)
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Workspace {
  id          Int               @id @default(autoincrement())
  name        String
  companySize Int
  slug        String            @unique
  userId      Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  members     WorkspaceMember[]
}

model WorkspaceMember {
  id          Int       @id @default(autoincrement())
  userId      Int
  workspaceId Int
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        String    @default("Membro")
  joinedAt    DateTime  @default(now())

  @@unique([userId, workspaceId])
}

model TaskActivity {
  id        Int      @id @default(autoincrement())
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      String
  action    String
  field     String?
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())
}
